name: Auto-update all language playlists

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:

jobs:
  update-playlists:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Generate all playlists
        id: generate
        run: |
          npm install node-fetch@2
          node <<'EOF'
          const fs = require('fs');
          const fetch = require('node-fetch');

          const playlists = [
            { category: "Tamil", file: "tn.m3u" },
            { category: "Telugu", file: "an.m3u" },
            { category: "Kannada", file: "ka.m3u" },
            { category: "English", file: "en.m3u" },
            { category: "Malayalam", file: "kl.m3u" }
          ];

          const extraCategories = ["Kids", "Sports", "Infotainment"];
          const url = 'https://tnm3ulive-default-rtdb.asia-southeast1.firebasedatabase.app/channels.json';

          // Escape quotes safely
          const esc = (txt = "") => txt.replace(/"/g, '\\"').trim();

          (async () => {
            try {
              const res = await fetch(url, { timeout: 15000 });
              const data = await res.json();
              if (!data) {
                console.log("No channels found.");
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=false\n`);
                return;
              }

              let anyChanges = false;
              let allSummaries = [];

              for (const { category, file } of playlists) {
                const prevData = fs.existsSync(file) ? fs.readFileSync(file, 'utf8') : '';
                const BOM = '\uFEFF'; // UTF-8 BOM for IPTV compatibility
                let m3u = `${BOM}#EXTM3U x-tvg-url="https://iptv-org.github.io/epg/guides.xml.gz"\n`;

                const changesSummary = [];
                const newNames = [];
                const categoriesToInclude = [category, ...extraCategories];

                for (const id of Object.keys(data)) {
                  const ch = data[id];
                  if (!categoriesToInclude.includes(ch.category)) continue;

                  const name = esc(ch.name || "Unknown");
                  const logo = esc(ch.icon || "");
                  const stream = (ch.stream || "").trim();
                  const group = esc(ch.channelType || category);

                  if (!stream.startsWith("http")) continue;

                  const extinf = `#EXTINF:-1 tvg-id="" tvg-name="${name}" tvg-logo="${logo}" group-title="${group}",${name}`;
                  m3u += `${extinf}\n${stream}\n`;
                  newNames.push(name);
                }

                // Detect changes
                const prevLines = prevData.split('\n');
                const oldNames = prevLines
                  .filter(l => l.startsWith('#EXTINF'))
                  .map(l => l.split(',')[1])
                  .filter(Boolean);

                const added = newNames.filter(x => !oldNames.includes(x));
                const removed = oldNames.filter(x => !newNames.includes(x));

                if (added.length || removed.length) {
                  if (added.length) changesSummary.push(`Added: ${added.join(', ')}`);
                  if (removed.length) changesSummary.push(`Removed: ${removed.join(', ')}`);
                  fs.writeFileSync(file, m3u, 'utf8');
                  anyChanges = true;
                  console.log(`${file} updated successfully.`);
                  console.log(`Changes: ${changesSummary.join('; ')}`);
                  allSummaries.push(`${file}: ${changesSummary.join('; ')}`);
                } else {
                  console.log(`No changes in ${file}. Skipping.`);
                }
              }

              if (!anyChanges) {
                console.log("No playlists changed. Skipping commit.");
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=false\n`);
              } else {
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=true\n`);
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `summary=${allSummaries.join(' | ')}\n`);
              }

            } catch (err) {
              console.error('Error fetching channels:', err);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=false\n`);
            }
          })();
          EOF

      - name: Commit and push if any playlist changed
        if: steps.generate.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add tn.m3u an.m3u ka.m3u en.m3u kl.m3u
          git commit -m "Auto-update playlists [skip ci] - ${{ steps.generate.outputs.summary }}"
          git push
