name: Auto-update all language playlists

on:
  schedule:
    - cron: '*/5 * * * *'  # Every 5 minutes
  workflow_dispatch:

jobs:
  update-playlists:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Generate all playlists
        id: generate
        run: |
          npm install node-fetch@2
          node <<'EOF'
          const fs = require('fs');
          const fetch = require('node-fetch');

          const playlists = [
            { category: "Tamil", file: "tn.m3u" },
            { category: "Telugu", file: "an.m3u" },
            { category: "Kannada", file: "ka.m3u" },
            { category: "English", file: "en.m3u" },
            { category: "Malayalam", file: "kl.m3u" }
          ];

          // Extra categories to always include
          const extraCategories = ["Kids", "Sports", "Infotainment"];

          const url = 'https://tnm3ulive-default-rtdb.asia-southeast1.firebasedatabase.app/channels.json';

          (async () => {
            try {
              const res = await fetch(url);
              const data = await res.json();
              if (!data) {
                console.log("No channels found.");
                return;
              }

              let anyChanges = false;
              let allSummaries = [];

              for (const playlist of playlists) {
                const { category, file } = playlist;
                const prevData = fs.existsSync(file) ? fs.readFileSync(file, 'utf8') : '';
                let m3u = "#EXTM3U\n";
                const changesSummary = [];
                const newNames = [];

                // Build list of categories to include
                const categoriesToInclude = [category, ...extraCategories];

                for (const id of Object.keys(data)) {
                  const ch = data[id];
                  if (!categoriesToInclude.includes(ch.category)) continue;

                  const name = ch.name || "Unknown";
                  const logo = ch.icon || "";
                  const stream = ch.stream || "";
                  const group = (ch.channelType === "regional") ? "Local Channels" : ch.channelType || "Unknown";

                  if (!stream) continue;

                  const extinf = `#EXTINF:-1 tvg-name="${name}" group-title="${group}" tvg-logo="${logo}",${name}`;
                  m3u += `${extinf}\n${stream}\n`;
                  newNames.push(name);

                  const prevLines = prevData.split('\n');
                  const prevExtinf = prevLines.find(line => line.startsWith('#EXTINF') && line.includes(name));
                  const prevStream = prevExtinf ? prevLines[prevLines.indexOf(prevExtinf) + 1] : null;

                  if (!prevExtinf) {
                    changesSummary.push(`Added: ${name}`);
                  } else if (prevExtinf !== extinf || prevStream !== stream) {
                    changesSummary.push(`Updated: ${name}`);
                  }
                }

                const oldNames = prevData.split('\n').filter(line => line.startsWith('#EXTINF')).map(line => line.split(',')[1]);
                oldNames.forEach(name => {
                  if (!newNames.includes(name)) {
                    changesSummary.push(`Removed: ${name}`);
                  }
                });

                if (changesSummary.length > 0) {
                  fs.writeFileSync(file, m3u);
                  anyChanges = true;
                  allSummaries.push(`${file}: ${changesSummary.join('; ')}`);
                  console.log(`${file} updated successfully.`);
                  console.log(`Changes: ${changesSummary.join('; ')}`);
                } else {
                  console.log(`No changes in ${file}. Skipping.`);
                }
              }

              if (!anyChanges) {
                console.log("No playlists changed. Skipping commit.");
                console.log('::set-output name=changed::false');
              } else {
                console.log('::set-output name=changed::true');
                console.log(`::set-output name=summary::${allSummaries.join(' | ')}`);
              }

            } catch (err) {
              console.error('Error fetching channels:', err);
            }
          })();
          EOF

      - name: Commit and push if any playlist changed
        if: steps.generate.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add tn.m3u an.m3u ka.m3u en.m3u kl.m3u
          git commit -m "Auto-update playlists [skip ci] - ${{ steps.generate.outputs.summary }}"
          git push