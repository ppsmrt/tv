name: Auto-update playlist

on:
  schedule:
    - cron: "0 0 * * *" # Every day at midnight UTC
  workflow_dispatch:

jobs:
  update-playlist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install requests

      - name: Run playlist fetch & decode
        run: |
          mkdir -p assets/playlist
          cat > fetch_playlist.py << 'EOF'
import requests, base64, json, urllib.parse, zlib, gzip, os

API_URL = "https://bmcloud.in/apis/apps/bmcloudapi.php?id=bmcloud"
OUTPUT_FILE = "assets/playlist/test.m3u"

def try_decode_level6(data, max_level=6):
    for level in range(1, max_level + 1):
        print(f"🔽 Level {level}")

        try:
            decoded_json = json.loads(data)
            print("✅ JSON detected")
            return decoded_json
        except:
            pass

        try:
            b64_decoded = base64.b64decode(data, validate=True)
            if b64_decoded != data.encode('utf-8', errors='ignore'):
                data = b64_decoded.decode('utf-8', errors='ignore')
                print("📦 Base64 decoded")
                continue
        except:
            pass

        url_decoded = urllib.parse.unquote_plus(data)
        if url_decoded != data:
            data = url_decoded
            print("🔗 URL decoded")
            continue

        try:
            gz_decoded = gzip.decompress(data.encode('latin1'))
            data = gz_decoded.decode('utf-8', errors='ignore')
            print("🗜️ Gzip decoded")
            continue
        except:
            pass

        try:
            z_decoded = zlib.decompress(data.encode('latin1'))
            data = z_decoded.decode('utf-8', errors='ignore')
            print("🗜️ Zlib decoded")
            continue
        except:
            pass

        print("ℹ️ No further decoding possible")
        break

    try:
        return json.loads(data)
    except:
        print("⚠️ JSON still invalid, returning raw data")
        return data

def json_to_m3u(data):
    """Convert decoded JSON into a proper .m3u playlist."""
    playlist = ["#EXTM3U"]
    if isinstance(data, dict):
        items = data.get("channels") or data.get("items") or []
    elif isinstance(data, list):
        items = data
    else:
        print("⚠️ Unexpected format, returning raw text")
        return str(data)

    for item in items:
        name = item.get("name") or item.get("title") or "Unknown Channel"
        url = item.get("url") or item.get("link") or item.get("stream") or ""
        logo = item.get("logo") or item.get("tvg-logo") or ""
        group = item.get("group") or item.get("group-title") or "BMCloud"
        if not url:
            continue
        playlist.append(f'#EXTINF:-1 tvg-logo="{logo}" group-title="{group}",{name}')
        playlist.append(url)
    return "\n".join(playlist)

def fetch_and_save():
    try:
        print(f"📡 Fetching {API_URL}")
        resp = requests.get(API_URL, timeout=20)
        resp.raise_for_status()
        data = resp.text.strip()

        decoded = try_decode_level6(data)
        m3u_output = json_to_m3u(decoded)
        
        os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            f.write(m3u_output)

        print(f"✅ Playlist saved to {OUTPUT_FILE}")
    except Exception as e:
        print(f"❌ Fatal error: {e}")
        with open(OUTPUT_FILE, "w", encoding="utf-8") as f:
            f.write("#EXTM3U\n")

if __name__ == "__main__":
    fetch_and_save()
EOF
          python fetch_playlist.py

      - name: Commit and push changes
        run: |
          git config user.name "bmcloud-bot"
          git config user.email "actions@github.com"
          git add assets/playlist/test.m3u
          git commit -m "Auto-update playlist [$(date +'%Y-%m-%d %H:%M:%S')]" || echo "No changes"
          git push
