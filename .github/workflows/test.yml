name: Auto-update test.m3u

on:
  schedule:
    - cron: "*/5 * * * *" # Every 5 minutes
  workflow_dispatch:

jobs:
  update-playlist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Generate masked test.m3u
        id: generate
        run: |
          npm install node-fetch@2
          node <<'EOF'
          const fs = require('fs');
          const fetch = require('node-fetch');

          const url = 'https://tnm3ulive-default-rtdb.asia-southeast1.firebasedatabase.app/channels.json';
          const outputFile = 'assets/playlist/test.m3u';
          const prevData = fs.existsSync(outputFile) ? fs.readFileSync(outputFile, 'utf8') : '';

          (async () => {
            try {
              const res = await fetch(url);
              const data = await res.json();
              if (!data || Object.keys(data).length === 0) {
                console.log("No channels found, skipping.");
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=false\n`);
                process.exit(0);
              }

              fs.mkdirSync('assets/playlist', { recursive: true });

              let m3u = "#EXTM3U\n";
              let changesSummary = [];
              let counter = 1;

              for (const id of Object.keys(data)) {
                try {
                  const ch = data[id];
                  const name = (ch.name || "Unknown").replace(/[,"\r\n]/g, " ");
                  const channelType = ch.channelType || "General";
                  const logo = ch.icon && ch.icon.trim() !== "" ? ch.icon.trim() : null;
                  const stream = ch.stream?.trim();
                  if (!stream) continue;

                  // Masked URL points to your server
                  const maskedUrl = `https://tnm3u.live/stream?id=${String(counter).padStart(2,'0')}`;
                  counter++;

                  let extinf = `#EXTINF:-1 tvg-name="${name}" group-title="${channelType}"`;
                  if (logo) extinf += ` tvg-logo="${logo}"`;
                  extinf += `,${name}`;

                  m3u += `${extinf}\n${maskedUrl}\n`;

                  const prevExtinf = prevData.split('\n').find(line => line.includes(name) && line.startsWith('#EXTINF'));
                  const prevStreamLine = prevExtinf ? prevData.split('\n')[prevData.split('\n').indexOf(prevExtinf) + 1] : null;

                  if (!prevExtinf) {
                    changesSummary.push(`Added: ${name}`);
                  } else if (prevExtinf !== extinf || prevStreamLine !== maskedUrl) {
                    changesSummary.push(`Updated: ${name}`);
                  }
                } catch(err) {
                  console.log("Skipping invalid channel:", id, err.message);
                }
              }

              // Detect removed channels
              const oldNames = prevData.split('\n').filter(line => line.startsWith('#EXTINF')).map(line => line.split(',')[1]);
              oldNames.forEach(name => {
                if (!Object.values(data).some(ch => (ch.name || "Unknown") === name)) {
                  changesSummary.push(`Removed: ${name}`);
                }
              });

              fs.writeFileSync(outputFile, m3u.replace(/\r\n/g,'\n'), 'utf8');

              if (changesSummary.length === 0) {
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=false\n`);
                console.log("No changes detected.");
              } else {
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=true\n`);
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `summary=${changesSummary.join('; ')}\n`);
                console.log("Playlist updated:", changesSummary.join('; '));
              }

            } catch(err) {
              console.error("Error fetching channels:", err);
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=false\n`);
              process.exit(0);
            }
          })();
          EOF

      - name: Commit and push if changed
        if: steps.generate.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add assets/playlist/test.m3u
          git commit -m "Auto-update test.m3u [skip ci] - ${{ steps.generate.outputs.summary }}"
          git push
