name: Auto-update IPTV Playlists

on:
  schedule:
    - cron: "*/5 * * * *"  # Every 5 minutes
  workflow_dispatch:

jobs:
  update-playlists:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Generate playlists if changed
        id: generate
        run: |
          npm install node-fetch@2
          node <<'EOF'
          const fs = require('fs');
          const fetch = require('node-fetch');
          const crypto = require('crypto');

          // Utility to write M3U and return if changed
          async function writePlaylist(filePath, logPath, channels) {
            let m3u = "#EXTM3U\n";
            channels.forEach(ch => {
              const name = ch.name || "Unknown";
              const stream = ch.stream || "";
              if (!stream) return;
              const logo = ch.logo || "";
              const category = ch.category || "General";
              const extinf = `#EXTINF:-1 tvg-name="${name}" group-title="${category}" tvg-logo="${logo}",${name}`;
              m3u += `${extinf}\n${stream}\n`;
            });

            const prevData = fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf8').trim() : '';
            if (m3u.trim() === prevData) return false;

            fs.writeFileSync(filePath, m3u);
            const timestamp = new Date().toISOString();
            fs.appendFileSync(logPath, `\n[${timestamp}] Playlist updated\n`);
            return true;
          }

          // ------------------- BMCloud -------------------
          const bmcloudUrl = 'https://as.al/raw/NyCqwJ';
          const bmcloudPath = 'bmcloud.m3u';
          const bmcloudLog = 'bmcloud.log';
          try {
            const rawBm = (await (await fetch(bmcloudUrl)).text()).trim();
            const bmLines = rawBm.split(/\r?\n/);
            const bmChannels = [];
            for (let i=0;i<bmLines.length;i++){
              if(bmLines[i].startsWith('#EXTINF')){
                const name = bmLines[i].split(',')[1]?.trim() || "Unknown";
                const stream = bmLines[i+1]?.trim() || '';
                bmChannels.push({name, stream, category:"General", logo:""});
                i++;
              }
            }
            var bmChanged = await writePlaylist(bmcloudPath, bmcloudLog, bmChannels);
          } catch(err) {
            console.error("❌ BMCloud fetch error:", err);
            var bmChanged = false;
          }

          // ------------------- Roja IPTV -------------------
          function generateNonce(length=16){
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let result = '';
            for(let i=0;i<length;i++) result += chars.charAt(Math.floor(Math.random()*chars.length));
            return result;
          }
          function sha256(data){ return crypto.createHash('sha256').update(data).digest('hex'); }
          const timestamp = Math.floor(Date.now()/1000);
          const nonce = generateNonce(16);
          const secret = "ROJAIPTV_CH_DB_443LOCK128";
          const signature = sha256(`${timestamp}${nonce}${secret}`);
          const rojaUrl = `https://rojaiptv.site/app_datas/get_channels.php?timestamp=${timestamp}&nonce=${nonce}&signature=${signature}`;
          const rojaPath = 'roja.m3u';
          const rojaLog = 'roja.log';
          try {
            const rawRoja = (await (await fetch(rojaUrl)).text()).trim();
            const rojaJson = JSON.parse(rawRoja);
            const rojaChannels = rojaJson.map(ch => ({
              name: ch.channelname || "Unknown",
              stream: ch.playbackurl || "",
              logo: ch.logo || "",
              category: ch.category || "General"
            }));
            var rojaChanged = await writePlaylist(rojaPath, rojaLog, rojaChannels);
          } catch(err){
            console.error("❌ Roja fetch error:", err);
            var rojaChanged = false;
          }

          const anyChanged = bmChanged || rojaChanged;
          if(!anyChanged){
            console.log("ℹ️ No changes detected in either playlist.");
            require('child_process').execSync(`echo "changed=false" >> $GITHUB_OUTPUT`);
          } else {
            console.log("✅ At least one playlist updated.");
            require('child_process').execSync(`echo "changed=true" >> $GITHUB_OUTPUT`);
            require('child_process').execSync(`echo "summary=Playlists updated" >> $GITHUB_OUTPUT`);
          }
          EOF

      - name: Commit and push if changed
        if: steps.generate.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add bmcloud.m3u bmcloud.log roja.m3u roja.log
          git commit -m "Auto-update playlists [skip ci] - ${{ steps.generate.outputs.summary }}"
          git push