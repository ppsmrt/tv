name: Auto-update playlist.m3u

on:
  schedule:
    - cron: "*/5 * * * *"  # Every 5 minutes
  workflow_dispatch:

jobs:
  update-playlist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Generate playlist.m3u only if changed
        id: generate
        run: |
          npm install node-fetch@2
          node <<'EOF'
          const fs = require('fs');
          const fetch = require('node-fetch');
          const epgMap = require('./epg-map.json');

          const url = 'https://tnm3ulive-default-rtdb.asia-southeast1.firebasedatabase.app/channels.json';
          const filePath = 'playlist.m3u';
          const prevData = fs.existsSync(filePath) ? fs.readFileSync(filePath, 'utf8') : '';

          (async () => {
            try {
              const res = await fetch(url);
              const data = await res.json();
              if (!data) {
                console.log("No channels found.");
                return;
              }

              // Add EPG header
              let m3u = '#EXTM3U url-tvg="https://iptv-org.github.io/epg/guides/in.xml.gz"\n';
              let changesSummary = [];

              for (const id of Object.keys(data)) {
                const ch = data[id];
                const name = ch.name || "Unknown";
                const category = ch.category || "General";
                const logo = ch.icon || "";
                const stream = ch.stream || "";
                if (!stream) continue;

                // EPG mapping (fallback if not found)
                const tvgId = epgMap[name] || ch.tvgid || name.replace(/\s+/g, '').toLowerCase();

                const extinf = `#EXTINF:-1 tvg-id="${tvgId}" tvg-name="${name}" group-title="${category}" tvg-logo="${logo}",${name}`;
                m3u += `${extinf}\n${stream}\n`;

                // Detect changes
                const prevLineIndex = prevData.indexOf(name);
                if (prevLineIndex === -1) {
                  changesSummary.push(`Added: ${name}`);
                } else {
                  const prevExtinf = prevData.split('\n').find(line => line.includes(name) && line.startsWith('#EXTINF'));
                  const prevStreamLine = prevData.split('\n')[prevData.split('\n').indexOf(prevExtinf) + 1];
                  if (prevExtinf !== extinf || prevStreamLine !== stream) {
                    changesSummary.push(`Updated: ${name}`);
                  }
                }
              }

              // Check for removed channels
              const oldNames = prevData.split('\n').filter(line => line.startsWith('#EXTINF')).map(line => line.split(',')[1]);
              oldNames.forEach(name => {
                if (!Object.values(data).some(ch => ch.name === name)) {
                  changesSummary.push(`Removed: ${name}`);
                }
              });

              if (changesSummary.length === 0) {
                console.log("No changes in playlist, skipping file generation.");
                console.log('changed=false');
                return;
              }

              fs.writeFileSync(filePath, m3u);
              console.log('playlist.m3u updated successfully.');
              console.log('changed=true');
              console.log(`summary=${changesSummary.join('; ')}`);

            } catch (err) {
              console.error('Error fetching channels:', err);
              process.exit(1);
            }
          })();
          EOF

      - name: Commit and push if changed
        run: |
          if grep -q "changed=true" <<< "$(cat $GITHUB_STEP_SUMMARY)"; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add playlist.m3u
            git commit -m "Auto-update playlist.m3u [skip ci]"
            git push
          else
            echo "No changes to commit."
          fi