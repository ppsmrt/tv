name: Auto-update filter.m3u

on:
  schedule:
    - cron: "*/5 * * * *" # Every 5 minutes
  workflow_dispatch:

jobs:
  update-playlist:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Generate filtered filter.m3u using filter.json
        id: generate
        run: |
          npm install node-fetch@2
          node <<'EOF'
          const fs = require('fs');
          const fetch = require('node-fetch');

          const configFile = 'assets/playlist/filter.json';
          const outputFile = 'assets/playlist/filter.m3u';
          const url = 'https://raw.githubusercontent.com/alex8875/m3u/refs/heads/main/jstar.m3u';
          const prevData = fs.existsSync(outputFile) ? fs.readFileSync(outputFile, 'utf8') : '';

          if (!fs.existsSync(configFile)) {
            console.error(`❌ Missing config file: ${configFile}`);
            process.exit(1);
          }

          // Read JSON configuration
          const config = JSON.parse(fs.readFileSync(configFile, 'utf8'));
          const groupMap = {};
          for (const [groupTitle, ids] of Object.entries(config)) {
            ids.forEach(id => (groupMap[id] = groupTitle));
          }

          (async () => {
            try {
              const res = await fetch(url);
              const playlist = await res.text();
              if (!playlist || !playlist.includes('#EXTINF')) {
                console.log("No valid playlist data found.");
                process.exit(0);
              }

              const lines = playlist.split('\n');
              let blocks = [];
              let currentBlock = [];

              // Split into channel blocks
              for (const line of lines) {
                if (line.startsWith('#EXTINF')) {
                  if (currentBlock.length) {
                    blocks.push(currentBlock.join('\n'));
                    currentBlock = [];
                  }
                  currentBlock.push(line);
                } else if (currentBlock.length) {
                  currentBlock.push(line);
                }
              }
              if (currentBlock.length) blocks.push(currentBlock.join('\n'));

              // Filter and assign group-titles from JSON
              const filteredBlocks = blocks
                .map(block => {
                  const idMatch = block.match(/tvg-id="(\d+)"/);
                  if (!idMatch) return null;
                  const id = parseInt(idMatch[1]);
                  const groupTitle = groupMap[id];
                  if (!groupTitle) return null;

                  // Replace existing group-title or insert new
                  if (block.includes('group-title=')) {
                    block = block.replace(/group-title="(.*?)"/, `group-title="${groupTitle}"`);
                  } else {
                    block = block.replace(
                      /(tvg-id=".*?")/,
                      `$1 group-title="${groupTitle}"`
                    );
                  }

                  return block;
                })
                .filter(Boolean);

              const finalPlaylist = ['#EXTM3U', ...filteredBlocks].join('\n\n');

              // Detect if changes occurred
              if (prevData.trim() === finalPlaylist.trim()) {
                console.log("No changes detected in filtered playlist.");
                fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=false\n`);
                process.exit(0);
              }

              // Save updated playlist
              fs.mkdirSync('assets/playlist', { recursive: true });
              fs.writeFileSync(outputFile, finalPlaylist, 'utf8');
              console.log("✅ Filtered playlist updated using filter.json");
              fs.appendFileSync(process.env.GITHUB_OUTPUT, `changed=true\n`);
            } catch (err) {
              console.error("Error:", err);
              process.exit(1);
            }
          })();
          EOF

      - name: Commit and push if changed
        if: steps.generate.outputs.changed == 'true'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add assets/playlist/filter.m3u
          git commit -m "Auto-update filtered playlist from filter.json [skip ci]"
          git push
